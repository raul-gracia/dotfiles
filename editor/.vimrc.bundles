call plug#begin()

Plug 'ctrlpvim/ctrlp.vim'
      let g:ctrlp_working_path_mode = 'ra'
      let g:ctrlp_open_new_file = 't'
      let g:ctrlp_prompt_mappings = {
            \ 'AcceptSelection("e")': ['<c-t>'],
            \ 'AcceptSelection("t")': ['<cr>', '<2-LeftMouse>'],
            \ }
      let g:ctrlp_custom_ignore = {
            \ 'dir':  '\.git$\|log$\|tmp$\|_build$\|node_modules$\|deps$\|android/\.gradle$\|android/app$\|flow-typed$\|ios/build$',
            \ 'file': '\v\.(exe|so|dll)$',
            \ }
      let g:ctrlp_custom_ignore = {
  \ }
      let g:ctrlp_show_hidden = 1
      let g:ctrlp_use_caching = 0
      let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'


" Execute code checks, find mistakes, in the background
Plug 'neomake/neomake'
      " Run Neomake when I save any buffer
      augroup localneomake
        autocmd! BufWritePost * Neomake
      augroup END

" Autoformat code
Plug 'sbdchd/neoformat'
      augroup fmt
        autocmd! BufWritePre * Neoformat
      augroup END
      let g:neoformat_ruby_rubocop = {
            \ 'exe': 'bundle exec rubocop',
            \ 'args': ['-a', '--stdin ', '%:p', '2>/dev/null']
            \ }

      let g:neoformat_enabled_ruby = ['rubocop']
      let g:neoformat_enabled_yaml = []

      function! RubocopAutocorrect()
        execute "!rubocop -a -R " . bufname("%")
        e
      endfunction

      map <silent> <Leader>cop :call RubocopAutocorrect()<cr>

""""""""""""""""""""""""""" Completion
Plug 'honza/vim-snippets'
Plug 'SirVer/ultisnips'
      let g:UltiSnipsExpandTrigger="<c-j>"
      let g:UltiSnipsJumpForwardTrigger="<c-b>"
      let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
      " let g:deoplete#enable_at_startup = 1
      " autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif
      " inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"

Plug 'mattn/emmet-vim'

" Elixir
Plug 'elixir-editors/vim-elixir'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'slashmili/alchemist.vim'


Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
      let g:airline_theme='powerlineish'
      let g:airline#extensions#tagbar#enabled = 1
"
Plug 'janko-m/vim-test'
      nmap <silent> <leader>t :TestNearest<CR>
      nmap <silent> <leader>T :TestFile<CR>
      nmap <silent> <leader>a :TestSuite<CR>
      nmap <silent> <leader>l :TestLast<CR>
      nmap <silent> <leader>g :TestVisit<CR>
      let test#strategy = "dispatch"
      let test#ruby#use_binstubs = 0


Plug 'tpope/vim-rails'
Plug 'vim-utils/vim-ruby-fold'
Plug 'tpope/vim-dispatch'
      let g:dispatch_quickfix_height = 20
Plug 'radenling/vim-dispatch-neovim'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-fugitive'

Plug 'altercation/vim-colors-solarized'
" let g:solarized_termcolors=256

Plug 'scrooloose/nerdtree'
      " Auto open nerdtree
      map <C-d> :NERDTreeToggle<CR>
      nmap <silent> <C-D> :NERDTreeToggle<CR>
      nmap <silent> <C-E> :NERDTreeFind<CR>
      let g:NERDTreeDirArrowExpandable = '▸'
      let g:NERDTreeDirArrowCollapsible = '▾'
      let g:NERDTreeQuitOnOpen = 1
      let g:NERDTreeAutoDeleteBuffer = 1
      let g:NERDTreeMinimalUI = 1
      let g:NERDTreeDirArrows = 1

Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'ddollar/nerdcommenter'
      let g:NERDSpaceDelims = 1

Plug 'rking/ag.vim'
Plug 'junegunn/vim-easy-align'
" Plug 'tpope/vim-projectionist'
Plug 'christoomey/vim-tmux-navigator'
" Polyglot loads language support on demand!
Plug 'sheerun/vim-polyglot'
Plug 'airblade/vim-gitgutter'
Plug 'amadeus/vim-mjml'
    au BufRead,BufNewFile *.mjml.erb set filetype mjml

call plug#end()

call neomake#configure#automake('rw', 1000)
